{
    "sys": {
        "space": {
            "sys": {
                "type": "Link",
                "linkType": "Space",
                "id": "wc9q326cpg8b"
            }
        },
        "id": "3rXRX93SnhCmIRe9YApKAx",
        "type": "Entry",
        "createdAt": "2020-08-09T14:59:41.154Z",
        "updatedAt": "2020-08-09T14:59:41.154Z",
        "environment": {
            "sys": {
                "id": "master",
                "type": "Link",
                "linkType": "Environment"
            }
        },
        "revision": 1,
        "contentType": {
            "sys": {
                "type": "Link",
                "linkType": "ContentType",
                "id": "published"
            }
        },
        "locale": "en-US"
    },
    "fields": {
        "published": "2020-08-10",
        "title": "また作り直した（Next.js + contentful + vercel + 独自ドメイン）",
        "post": "<p>タイトル読みゃわかるんですけど、懲りずに移行、というか作り直しました。</p>\n<h3>動機</h3>\n<p>前のサイトを作り直した当時は副業でもりもりVue.jsを使っていたからNuxtで組んだんですけど、転職のからみでVue.jsを触る機会がまったくなくなった結果、書き方を完全に忘れ去ってしまった、というのがまず1点。</p>\n<p>もうひとつはデザインが気に入らなくなってしまったのです。というか正直作って1ヶ月くらい、いや嘘ですね。1週間くらいでなんかやだなとなってました。なんか暗いんですけどって感じで。</p>\n<p>ポストロック寄りのハードコアっぽいデザインを狙ったんですが、自分のサイトに採用するもんじゃないなと。見てて疲れるし飽きるしアニメーションも全体的にとってつけたような感じだったし。なんで、やめたった。</p>\n<p>今回のでさすがにもう落ち着くかな〜と。</p>\n<h3>技術選定</h3>\n<h4>コア</h4>\n<p>まずReactは確定でした。普段から使ってるのももちろんあるんですが、テンプレ言語と違って</p>\n<ul>\n<li>DOMをJS(TS)で書ける</li>\n<li>Linter / Formatterがごく自然に走る\n<ul>\n<li>a11yチェックできるって素晴らしくないですか</li>\n</ul>\n</li>\n<li>pug / slim みたいな、Pythonインスパイア系ではない\n<ul>\n<li>あれらはhtmlから遠くに行き過ぎてて、「考えながら」でないと書けない</li>\n</ul>\n</li>\n</ul>\n<p>というのが静的サイトを作る上でも大きすぎまして。この3点が解決できるなら他のでもいいんですけど、他にないよなー少なくとも僕の知る限りはないわなーと。</p>\n<p>ほんでもってJAMstack構成でやるのもマスト。となると基盤になってくるのは以下の3つかなと。</p>\n<ol>\n<li>生でゴニョゴニョやって頑張る</li>\n<li>Gatsby</li>\n<li>Next.js</li>\n</ol>\n<p>1はあんまり勉強にならんなーということで除外。いや、間違いなく勉強にはなるんだけど、生で書くのはさんざんやっとるしフレームワークの経験も積みたかったので除外。</p>\n<p>で。そうすると2と3になるんですが、今のうちにNext.jsある程度触っといたほうが良さそうだなとつよく思ったので3にしました。ちなみに2ことGatsbyも<a href=\"https://github.com/kaave/gatsby-ts-test\">一応ある程度組んではみたです。</a>ぜんぜんいけるよなーと思ったけどNext.jsでいけるならそっちのほうがええわーでした。</p>\n<h4>スタイル</h4>\n<p>dart-sass + PostCSSでCSS Modulesです。CSS Modulesはぼちぼちやめて完全BEM移行でも別にかまわんなーと思うんですが、SCSS + PostCSSの組み合わせは自分にとっては一番考えることが少ないのでやっぱこれだなーCSS in JSもええんだけどやっぱ僕はこっちだなーって感じです。</p>\n<h4>原稿</h4>\n<p>contentful。理由は今のうちに触っておいてそのうち経験ありますよって言いたくて（こればっかですいません）。いけてるなぁという感じですね。</p>\n<p>一周回ってMarkdownを普通に書くのもありだったんですが、そのうちpushするの忘れてどこに最新があるのかわからんってなるに決まってるのでやめました。</p>\n<p>ちなみにまだWeb Hook仕込んでないので手作業でデプロイしてます。そのうちやります。あ、あとIncremental Static Regeneration仕込んだほうがいいかな。めった更新されないブログでいるかーって気はもちろんしてますけどやっといたほうが経験値あがるしなー。</p>\n<h4>配信</h4>\n<p>vercel。Next.js使うならこれしかないのでは？</p>\n<h3>Next.jsは便利</h3>\n<p>Nuxt.jsを先に触ったクチなので「なんだスカスカじゃないか」と思ったんですが、触ってくと抑えるべきポイントはきちんと押さえてあって便利やーんにあっさり手のひら返ししました。Reactのダルいとこだけうまくラップして、好きにしたいところはそのままにしてくれてるっていうか。</p>\n<p>なんでこうなん、ホントに仕様？という謎挙動もいくつか見受けられるのは事実ですが、トータルで見ればまぁプラス、新規にReactでWebアプリケーション作成するなら大抵のケースでマッチするんじゃないかと思います。</p>\n<h3>形になってよかった</h3>\n<p>やーほんと、形になってよかったです。作っちゃ飽きちゃを繰り返して半年近く時間がかかってしまった…。</p>\n<p>そのうちNext.jsで静的サイト作成する上でのだるかったネタもネチネチ書こうと思います。</p>\n",
        "thumbnail": {
            "sys": {
                "space": {
                    "sys": {
                        "type": "Link",
                        "linkType": "Space",
                        "id": "wc9q326cpg8b"
                    }
                },
                "id": "6hbzj2sf4Y7UxAXk1uP10H",
                "type": "Asset",
                "createdAt": "2020-08-09T14:59:06.469Z",
                "updatedAt": "2020-08-09T14:59:06.469Z",
                "environment": {
                    "sys": {
                        "id": "master",
                        "type": "Link",
                        "linkType": "Environment"
                    }
                },
                "revision": 1,
                "locale": "en-US"
            },
            "fields": {
                "title": "20200810",
                "file": {
                    "url": "//images.ctfassets.net/wc9q326cpg8b/6hbzj2sf4Y7UxAXk1uP10H/47a7c63e74542ee02e8b262b02673a37/3.png",
                    "details": {
                        "size": 201154,
                        "image": {
                            "width": 2000,
                            "height": 1415
                        }
                    },
                    "fileName": "3.png",
                    "contentType": "image/png"
                }
            }
        },
        "tags": [
            "next",
            "frontend"
        ],
        "rawPost": "タイトル読みゃわかるんですけど、懲りずに移行、というか作り直しました。\n\n### 動機\n\n前のサイトを作り直した当時は副業でもりもりVue.jsを使っていたからNuxtで組んだんですけど、転職のからみでVue.jsを触る機会がまったくなくなった結果、書き方を完全に忘れ去ってしまった、というのがまず1点。\n\nもうひとつはデザインが気に入らなくなってしまったのです。というか正直作って1ヶ月くらい、いや嘘ですね。1週間くらいでなんかやだなとなってました。なんか暗いんですけどって感じで。\n\nポストロック寄りのハードコアっぽいデザインを狙ったんですが、自分のサイトに採用するもんじゃないなと。見てて疲れるし飽きるしアニメーションも全体的にとってつけたような感じだったし。なんで、やめたった。\n\n今回のでさすがにもう落ち着くかな〜と。\n\n### 技術選定\n\n#### コア\n\nまずReactは確定でした。普段から使ってるのももちろんあるんですが、テンプレ言語と違って\n\n- DOMをJS(TS)で書ける\n- Linter / Formatterがごく自然に走る\n  - a11yチェックできるって素晴らしくないですか\n- pug / slim みたいな、Pythonインスパイア系ではない\n  - あれらはhtmlから遠くに行き過ぎてて、「考えながら」でないと書けない\n\nというのが静的サイトを作る上でも大きすぎまして。この3点が解決できるなら他のでもいいんですけど、他にないよなー少なくとも僕の知る限りはないわなーと。\n\nほんでもってJAMstack構成でやるのもマスト。となると基盤になってくるのは以下の3つかなと。\n\n1. 生でゴニョゴニョやって頑張る\n2. Gatsby\n3. Next.js\n\n1はあんまり勉強にならんなーということで除外。いや、間違いなく勉強にはなるんだけど、生で書くのはさんざんやっとるしフレームワークの経験も積みたかったので除外。\n\nで。そうすると2と3になるんですが、今のうちにNext.jsある程度触っといたほうが良さそうだなとつよく思ったので3にしました。ちなみに2ことGatsbyも[一応ある程度組んではみたです。](https://github.com/kaave/gatsby-ts-test)ぜんぜんいけるよなーと思ったけどNext.jsでいけるならそっちのほうがええわーでした。\n\n#### スタイル\n\ndart-sass + PostCSSでCSS Modulesです。CSS Modulesはぼちぼちやめて完全BEM移行でも別にかまわんなーと思うんですが、SCSS + PostCSSの組み合わせは自分にとっては一番考えることが少ないのでやっぱこれだなーCSS in JSもええんだけどやっぱ僕はこっちだなーって感じです。\n\n#### 原稿\n\ncontentful。理由は今のうちに触っておいてそのうち経験ありますよって言いたくて（こればっかですいません）。いけてるなぁという感じですね。\n\n一周回ってMarkdownを普通に書くのもありだったんですが、そのうちpushするの忘れてどこに最新があるのかわからんってなるに決まってるのでやめました。\n\nちなみにまだWeb Hook仕込んでないので手作業でデプロイしてます。そのうちやります。あ、あとIncremental Static Regeneration仕込んだほうがいいかな。めった更新されないブログでいるかーって気はもちろんしてますけどやっといたほうが経験値あがるしなー。\n\n#### 配信\n\nvercel。Next.js使うならこれしかないのでは？\n\n### Next.jsは便利\n\nNuxt.jsを先に触ったクチなので「なんだスカスカじゃないか」と思ったんですが、触ってくと抑えるべきポイントはきちんと押さえてあって便利やーんにあっさり手のひら返ししました。Reactのダルいとこだけうまくラップして、好きにしたいところはそのままにしてくれてるっていうか。\n\nなんでこうなん、ホントに仕様？という謎挙動もいくつか見受けられるのは事実ですが、トータルで見ればまぁプラス、新規にReactでWebアプリケーション作成するなら大抵のケースでマッチするんじゃないかと思います。\n\n### 形になってよかった\n\nやーほんと、形になってよかったです。作っちゃ飽きちゃを繰り返して半年近く時間がかかってしまった…。\n\nそのうちNext.jsで静的サイト作成する上でのだるかったネタもネチネチ書こうと思います。"
    }
}
